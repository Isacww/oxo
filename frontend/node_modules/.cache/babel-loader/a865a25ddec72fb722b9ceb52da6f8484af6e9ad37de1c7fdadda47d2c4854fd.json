{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nconst FULL_SIZE = 50; // Fixed board size\nconst INITIAL_ACTIVE_SIZE = 7; // Start with a 7x7 playable board\nconst EXPANSION_MARGIN = 2; // Expand when placing near the edge\nconst EXPANSION_AMOUNT = 4; // Increase active area by this amount\n\nconst useGameLogic = size => {\n  _s();\n  const [board, setBoard] = useState(Array(FULL_SIZE * FULL_SIZE).fill(null));\n  const [currentPlayer, setCurrentPlayer] = useState(\"X\");\n  const [winner, setWinner] = useState(null);\n  const [activeSize, setActiveSize] = useState(INITIAL_ACTIVE_SIZE);\n  const handleClick = index => {\n    if (board[index] !== null || winner) return;\n    const row = Math.floor(index / FULL_SIZE);\n    const col = index % FULL_SIZE;\n\n    // Expand board if near the current active edges\n    if (row < EXPANSION_MARGIN || col < EXPANSION_MARGIN || row >= activeSize - EXPANSION_MARGIN || col >= activeSize - EXPANSION_MARGIN) {\n      expandActiveBoard();\n    }\n\n    // Update board state\n    const newBoard = [...board];\n    newBoard[index] = currentPlayer;\n    setBoard(newBoard);\n    if (checkWinner(newBoard, activeSize, currentPlayer)) {\n      setWinner(currentPlayer);\n    } else {\n      setCurrentPlayer(currentPlayer === \"X\" ? \"O\" : \"X\");\n    }\n  };\n\n  // Expands the active board without modifying FULL_SIZE\n  const expandActiveBoard = () => {\n    if (activeSize + EXPANSION_AMOUNT <= FULL_SIZE) {\n      setActiveSize(activeSize + EXPANSION_AMOUNT);\n    }\n  };\n\n  // Checks for 5 in a row\n  const checkWinner = (board, size, currentPlayer) => {\n    const grid = [];\n\n    // Convert 1D board array into a 2D grid\n    for (let row = 0; row < size; row++) {\n      grid.push(board.slice(row * FULL_SIZE, (row + 1) * FULL_SIZE)); // Always slice from FULL_SIZE\n    }\n    const checkLine = cells => {\n      for (let i = 0; i <= cells.length - 5; i++) {\n        if (cells.slice(i, i + 5).every(cell => cell === currentPlayer)) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n    // Check rows\n    for (let row of grid.slice(0, size)) {\n      // Only check within active board\n      if (checkLine(row.slice(0, size))) return true;\n    }\n\n    // Check columns\n    for (let col = 0; col < size; col++) {\n      let column = grid.map(row => row[col]);\n      if (checkLine(column)) return true;\n    }\n\n    // Check diagonals\n    for (let startRow = 0; startRow <= size - 5; startRow++) {\n      for (let startCol = 0; startCol <= size - 5; startCol++) {\n        let mainDiagonal = [];\n        let antiDiagonal = [];\n        for (let i = 0; i < 5; i++) {\n          var _grid, _grid2;\n          mainDiagonal.push((_grid = grid[startRow + i]) === null || _grid === void 0 ? void 0 : _grid[startCol + i]);\n          antiDiagonal.push((_grid2 = grid[startRow + i]) === null || _grid2 === void 0 ? void 0 : _grid2[startCol + 4 - i]);\n        }\n        if (checkLine(mainDiagonal) || checkLine(antiDiagonal)) return true;\n      }\n    }\n    return false;\n  };\n  const resetGame = () => {\n    setBoard(Array(FULL_SIZE * FULL_SIZE).fill(null));\n    setCurrentPlayer(\"X\");\n    setWinner(null);\n    setActiveSize(INITIAL_ACTIVE_SIZE); // Reset board to starting size\n  };\n  return {\n    board,\n    currentPlayer,\n    winner,\n    activeSize,\n    handleClick,\n    resetGame\n  };\n};\n_s(useGameLogic, \"4U2SOWBoijhqHuX+UFPx+9h660w=\");\nexport default useGameLogic;","map":{"version":3,"names":["useState","FULL_SIZE","INITIAL_ACTIVE_SIZE","EXPANSION_MARGIN","EXPANSION_AMOUNT","useGameLogic","size","_s","board","setBoard","Array","fill","currentPlayer","setCurrentPlayer","winner","setWinner","activeSize","setActiveSize","handleClick","index","row","Math","floor","col","expandActiveBoard","newBoard","checkWinner","grid","push","slice","checkLine","cells","i","length","every","cell","column","map","startRow","startCol","mainDiagonal","antiDiagonal","_grid","_grid2","resetGame"],"sources":["C:/Users/issen/programmingCourses/own/oxo/oxo/frontend/src/hooks/GameLogicHook.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nconst FULL_SIZE = 50; // Fixed board size\r\nconst INITIAL_ACTIVE_SIZE = 7; // Start with a 7x7 playable board\r\nconst EXPANSION_MARGIN = 2; // Expand when placing near the edge\r\nconst EXPANSION_AMOUNT = 4; // Increase active area by this amount\r\n\r\nconst useGameLogic = (size) => {\r\n    const [board, setBoard] = useState(Array(FULL_SIZE * FULL_SIZE).fill(null));\r\n    const [currentPlayer, setCurrentPlayer] = useState(\"X\");\r\n    const [winner, setWinner] = useState(null);\r\n    const [activeSize, setActiveSize] = useState(INITIAL_ACTIVE_SIZE);\r\n\r\n\r\n    const handleClick = (index) => {\r\n        if (board[index] !== null || winner) return;\r\n\r\n        const row = Math.floor(index / FULL_SIZE);\r\n        const col = index % FULL_SIZE;\r\n\r\n        // Expand board if near the current active edges\r\n        if (\r\n            row < EXPANSION_MARGIN ||\r\n            col < EXPANSION_MARGIN ||\r\n            row >= activeSize - EXPANSION_MARGIN ||\r\n            col >= activeSize - EXPANSION_MARGIN\r\n        ) {\r\n            expandActiveBoard();\r\n        }\r\n\r\n        // Update board state\r\n        const newBoard = [...board];\r\n        newBoard[index] = currentPlayer;\r\n        setBoard(newBoard);\r\n\r\n        if (checkWinner(newBoard, activeSize, currentPlayer)) {\r\n            setWinner(currentPlayer);\r\n        } else {\r\n            setCurrentPlayer(currentPlayer === \"X\" ? \"O\" : \"X\");\r\n        }\r\n    };\r\n\r\n    // Expands the active board without modifying FULL_SIZE\r\n    const expandActiveBoard = () => {\r\n        if (activeSize + EXPANSION_AMOUNT <= FULL_SIZE) {\r\n            setActiveSize(activeSize + EXPANSION_AMOUNT);\r\n        }\r\n    };\r\n\r\n    // Checks for 5 in a row\r\n    const checkWinner = (board, size, currentPlayer) => {\r\n        const grid = [];\r\n        \r\n        // Convert 1D board array into a 2D grid\r\n        for (let row = 0; row < size; row++) {\r\n            grid.push(board.slice(row * FULL_SIZE, (row + 1) * FULL_SIZE)); // Always slice from FULL_SIZE\r\n        }\r\n\r\n        const checkLine = (cells) => {\r\n            for (let i = 0; i <= cells.length - 5; i++) {\r\n                if (cells.slice(i, i + 5).every(cell => cell === currentPlayer)) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n\r\n        // Check rows\r\n        for (let row of grid.slice(0, size)) { // Only check within active board\r\n            if (checkLine(row.slice(0, size))) return true;\r\n        }\r\n\r\n        // Check columns\r\n        for (let col = 0; col < size; col++) {\r\n            let column = grid.map(row => row[col]);\r\n            if (checkLine(column)) return true;\r\n        }\r\n\r\n        // Check diagonals\r\n        for (let startRow = 0; startRow <= size - 5; startRow++) {\r\n            for (let startCol = 0; startCol <= size - 5; startCol++) {\r\n                let mainDiagonal = [];\r\n                let antiDiagonal = [];\r\n                \r\n                for (let i = 0; i < 5; i++) {\r\n                    mainDiagonal.push(grid[startRow + i]?.[startCol + i]);\r\n                    antiDiagonal.push(grid[startRow + i]?.[startCol + 4 - i]);\r\n                }\r\n\r\n                if (checkLine(mainDiagonal) || checkLine(antiDiagonal)) return true;\r\n            }\r\n        }\r\n        return false;\r\n    };   \r\n    \r\n    const resetGame = () => {\r\n        setBoard(Array(FULL_SIZE * FULL_SIZE).fill(null));\r\n        setCurrentPlayer(\"X\");\r\n        setWinner(null);\r\n        setActiveSize(INITIAL_ACTIVE_SIZE); // Reset board to starting size\r\n    };\r\n\r\n    return { board, currentPlayer, winner, activeSize, handleClick, resetGame };\r\n};\r\n\r\nexport default useGameLogic;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}