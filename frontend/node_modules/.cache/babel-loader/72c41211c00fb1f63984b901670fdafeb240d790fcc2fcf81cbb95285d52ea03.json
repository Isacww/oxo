{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nconst useGameLogic = size => {\n  _s();\n  const [board, setBoard] = useState(Array(size * size).fill(null));\n  const [currentPlayer, setCurrentPlayer] = useState(\"X\");\n  const [winner, setWinner] = useState(null);\n  const handleClick = index => {\n    if (board[index] !== null || winner) return;\n    const newBoard = [...board];\n    newBoard[index] = currentPlayer;\n    setBoard(newBoard);\n    if (checkWinner(newBoard, size)) {\n      setWinner(currentPlayer);\n    } else {\n      setCurrentPlayer(currentPlayer === \"X\" ? \"O\" : \"X\");\n    }\n  };\n  const checkWinner = (board, size, currentPlayer) => {\n    const grid = [];\n\n    // Convert 1D board array into a 2D grid\n    for (let row = 0; row < size; row++) {\n      grid.push(board.slice(row * size, (row + 1) * size));\n    }\n\n    // Helper function to check if 5 consecutive cells contain only `currentPlayer`\n    const checkLine = cells => {\n      for (let i = 0; i <= cells.length - 5; i++) {\n        if (cells.slice(i, i + 5).every(cell => cell === currentPlayer)) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n    // Check rows\n    for (let row of grid) {\n      if (checkLine(row)) return true;\n    }\n\n    // Check columns\n    for (let col = 0; col < size; col++) {\n      let column = grid.map(row => row[col]);\n      if (checkLine(column)) return true;\n    }\n\n    // Check diagonals\n    for (let startRow = 0; startRow <= size - 5; startRow++) {\n      for (let startCol = 0; startCol <= size - 5; startCol++) {\n        let mainDiagonal = [];\n        let antiDiagonal = [];\n        for (let i = 0; i < 5; i++) {\n          var _grid, _grid2;\n          mainDiagonal.push((_grid = grid[startRow + i]) === null || _grid === void 0 ? void 0 : _grid[startCol + i]);\n          antiDiagonal.push((_grid2 = grid[startRow + i]) === null || _grid2 === void 0 ? void 0 : _grid2[startCol + 4 - i]);\n        }\n        if (checkLine(mainDiagonal) || checkLine(antiDiagonal)) return true;\n      }\n    }\n    return false; // No 5-in-a-row found\n  };\n  const resetGame = () => {\n    setBoard(Array(size * size).fill(null));\n    setCurrentPlayer(\"X\");\n    setWinner(null);\n  };\n  return {\n    board,\n    currentPlayer,\n    winner,\n    handleClick,\n    resetGame\n  };\n};\n_s(useGameLogic, \"nmbuJCh46UI9jTO8baTl2nYWMUg=\");\nexport default useGameLogic;","map":{"version":3,"names":["useState","useGameLogic","size","_s","board","setBoard","Array","fill","currentPlayer","setCurrentPlayer","winner","setWinner","handleClick","index","newBoard","checkWinner","grid","row","push","slice","checkLine","cells","i","length","every","cell","col","column","map","startRow","startCol","mainDiagonal","antiDiagonal","_grid","_grid2","resetGame"],"sources":["C:/Users/issen/programmingCourses/own/oxo/oxo/frontend/src/hooks/GameLogicHook.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nconst useGameLogic = (size) => {\r\n    const [board, setBoard] = useState(Array(size * size).fill(null));\r\n    const [currentPlayer, setCurrentPlayer] = useState(\"X\");\r\n    const [winner, setWinner] = useState(null);\r\n\r\n    const handleClick = (index) => {\r\n        if (board[index] !== null || winner) return;\r\n        const newBoard = [...board];\r\n        newBoard[index] = currentPlayer;\r\n        setBoard(newBoard);\r\n\r\n        if (checkWinner(newBoard, size)) {\r\n            setWinner(currentPlayer);\r\n        } else {\r\n            setCurrentPlayer(currentPlayer === \"X\" ? \"O\" : \"X\");\r\n        }\r\n    };\r\n\r\n    const checkWinner = (board, size, currentPlayer) => {\r\n        const grid = [];\r\n        \r\n        // Convert 1D board array into a 2D grid\r\n        for (let row = 0; row < size; row++) {\r\n            grid.push(board.slice(row * size, (row + 1) * size));\r\n        }\r\n    \r\n        // Helper function to check if 5 consecutive cells contain only `currentPlayer`\r\n        const checkLine = (cells) => {\r\n            for (let i = 0; i <= cells.length - 5; i++) {\r\n                if (cells.slice(i, i + 5).every(cell => cell === currentPlayer)) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n    \r\n        // Check rows\r\n        for (let row of grid) {\r\n            if (checkLine(row)) return true;\r\n        }\r\n    \r\n        // Check columns\r\n        for (let col = 0; col < size; col++) {\r\n            let column = grid.map(row => row[col]);\r\n            if (checkLine(column)) return true;\r\n        }\r\n    \r\n        // Check diagonals\r\n        for (let startRow = 0; startRow <= size - 5; startRow++) {\r\n            for (let startCol = 0; startCol <= size - 5; startCol++) {\r\n                let mainDiagonal = [];\r\n                let antiDiagonal = [];\r\n                \r\n                for (let i = 0; i < 5; i++) {\r\n                    mainDiagonal.push(grid[startRow + i]?.[startCol + i]);\r\n                    antiDiagonal.push(grid[startRow + i]?.[startCol + 4 - i]);\r\n                }\r\n    \r\n                if (checkLine(mainDiagonal) || checkLine(antiDiagonal)) return true;\r\n            }\r\n        }\r\n    \r\n        return false; // No 5-in-a-row found\r\n    };  \r\n    \r\n    const resetGame = () => {\r\n        setBoard(Array(size * size).fill(null));\r\n        setCurrentPlayer(\"X\");\r\n        setWinner(null);\r\n    };\r\n\r\n    return { board, currentPlayer, winner, handleClick, resetGame };\r\n};\r\n\r\nexport default useGameLogic;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}