{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\issen\\\\programmingCourses\\\\own\\\\oxo\\\\oxo\\\\frontend\\\\src\\\\components\\\\board.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"../style.css\";\nimport useGameLogic from \"../hooks/GameLogicHook\";\nimport { useUser } from \"../context/UserContext\";\nimport { TextField } from \"@mui/material\";\nimport CustomCard from \"./CustomCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DEFAULT_RANK = 1000; // Default rank if none is set\n\nconst Board = () => {\n  _s();\n  const {\n    board,\n    fullSize,\n    currentPlayer,\n    winner,\n    activeSize,\n    activeTopLeft,\n    handleClick,\n    resetGame\n  } = useGameLogic();\n  const {\n    user\n  } = useUser();\n\n  // Player states\n  const [playerX, setPlayerX] = useState((user === null || user === void 0 ? void 0 : user.username) || \"Player 1\");\n  const [playerXRank, setPlayerXRank] = useState((user === null || user === void 0 ? void 0 : user.rank) || DEFAULT_RANK);\n  const [playerO, setPlayerO] = useState(\"Player 2\");\n  const [playerORank, setPlayerORank] = useState(DEFAULT_RANK);\n\n  // Update Player X when user logs in\n  useEffect(() => {\n    if (user !== null && user !== void 0 && user.username) {\n      setPlayerX(user.username);\n      setPlayerXRank(user.rank || DEFAULT_RANK);\n    }\n  }, [user]);\n\n  // Update the winner's rank when the game is won\n  useEffect(() => {\n    if (winner) {\n      if (winner === \"X\") {\n        setPlayerXRank(prevRank => prevRank + 10);\n      } else {\n        setPlayerORank(prevRank => prevRank + 10);\n      }\n    }\n  }, [winner]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Players\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CustomCard, {\n        title: `${playerX}`,\n        description: `${playerXRank}`,\n        image: `../../cross.png` // Image stored in public/images\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CustomCard, {\n        title: `Opponent`,\n        description: `${playerORank}`,\n        image: `../../cross.png` // Image stored in public/images\n        ,\n        height: \"90\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-container\",\n      style: {\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${activeSize}, 1fr)`,\n        gridTemplateRows: `repeat(${activeSize}, 1fr)`\n      },\n      children: Array.from({\n        length: activeSize * activeSize\n      }).map((_, index) => {\n        const row = Math.floor(index / activeSize) + activeTopLeft.row;\n        const col = index % activeSize + activeTopLeft.col;\n        const fullIndex = row * fullSize + col;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cell-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `cell ${board[fullIndex] ? \"active\" : \"\"}`,\n            onClick: () => {\n              if (!winner) handleClick(index);\n            },\n            children: board[fullIndex]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"right-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Game Info\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: winner ? `Winner: ${winner === \"X\" ? playerX : playerO}!` : `Current Turn: ${currentPlayer === \"X\" ? playerX : playerO}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        className: \"reset-btn\",\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n_s(Board, \"VLaKIL3EzlbKQclaTvoxCNAu9Jo=\", false, function () {\n  return [useGameLogic, useUser];\n});\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","useEffect","useGameLogic","useUser","TextField","CustomCard","jsxDEV","_jsxDEV","DEFAULT_RANK","Board","_s","board","fullSize","currentPlayer","winner","activeSize","activeTopLeft","handleClick","resetGame","user","playerX","setPlayerX","username","playerXRank","setPlayerXRank","rank","playerO","setPlayerO","playerORank","setPlayerORank","prevRank","className","children","fileName","_jsxFileName","lineNumber","columnNumber","title","description","image","height","style","display","gridTemplateColumns","gridTemplateRows","Array","from","length","map","_","index","row","Math","floor","col","fullIndex","onClick","_c","$RefreshReg$"],"sources":["C:/Users/issen/programmingCourses/own/oxo/oxo/frontend/src/components/board.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"../style.css\";\r\nimport useGameLogic from \"../hooks/GameLogicHook\";\r\nimport { useUser } from \"../context/UserContext\";\r\nimport { TextField } from \"@mui/material\";\r\nimport CustomCard from \"./CustomCard\";\r\n\r\nconst DEFAULT_RANK = 1000; // Default rank if none is set\r\n\r\nconst Board = () => {\r\n    const { board, fullSize, currentPlayer, winner, activeSize, activeTopLeft, handleClick, resetGame } = useGameLogic();\r\n    const { user } = useUser();\r\n\r\n    // Player states\r\n    const [playerX, setPlayerX] = useState(user?.username || \"Player 1\");\r\n    const [playerXRank, setPlayerXRank] = useState(user?.rank || DEFAULT_RANK);\r\n    const [playerO, setPlayerO] = useState(\"Player 2\");\r\n    const [playerORank, setPlayerORank] = useState(DEFAULT_RANK);\r\n\r\n    // Update Player X when user logs in\r\n    useEffect(() => {\r\n        if (user?.username) {\r\n            setPlayerX(user.username);\r\n            setPlayerXRank(user.rank || DEFAULT_RANK);\r\n        }\r\n    }, [user]);\r\n\r\n    // Update the winner's rank when the game is won\r\n    useEffect(() => {\r\n        if (winner) {\r\n            if (winner === \"X\") {\r\n                setPlayerXRank((prevRank) => prevRank + 10);\r\n            } else {\r\n                setPlayerORank((prevRank) => prevRank + 10);\r\n            }\r\n        }\r\n    }, [winner]);\r\n\r\n    return (\r\n        <div className=\"game-container\">\r\n            {/* Left Panel for player names, ranks & game status */}\r\n            <div className=\"left-panel\">\r\n                <h3>Players</h3>\r\n                <CustomCard \r\n                    title={`${playerX}`} \r\n                    description={`${playerXRank}`}\r\n                    image={`../../cross.png`} // Image stored in public/images\r\n                />\r\n                <CustomCard \r\n                    title={`Opponent`} \r\n                    description={`${playerORank}`}\r\n                    image={`../../cross.png`} // Image stored in public/images\r\n                    height=\"90\"\r\n                />\r\n            </div>\r\n            \r\n            {/* Middle Panel - Game Board */}\r\n            <div className=\"board-container\" style={{ \r\n                display: \"grid\",\r\n                gridTemplateColumns: `repeat(${activeSize}, 1fr)`,\r\n                gridTemplateRows: `repeat(${activeSize}, 1fr)`,\r\n            }}>\r\n                {Array.from({ length: activeSize * activeSize }).map((_, index) => {\r\n                    const row = Math.floor(index / activeSize) + activeTopLeft.row;\r\n                    const col = (index % activeSize) + activeTopLeft.col;\r\n                    const fullIndex = row * fullSize + col; \r\n\r\n                    return (\r\n                        <div key={index} className=\"cell-container\">\r\n                            <div\r\n                                className={`cell ${board[fullIndex] ? \"active\" : \"\"}`}\r\n                                onClick={() => { if (!winner) handleClick(index); }}\r\n                            >\r\n                                {board[fullIndex]}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n\r\n            {/* Right Panel - Game Controls */}\r\n            <div className=\"right-panel\">\r\n                <h3>Game Info</h3>\r\n                <h2>\r\n                    {winner \r\n                        ? `Winner: ${winner === \"X\" ? playerX : playerO}!` \r\n                        : `Current Turn: ${currentPlayer === \"X\" ? playerX : playerO}`\r\n                    }\r\n                </h2>\r\n                <button onClick={resetGame} className=\"reset-btn\">Restart</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Board;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}